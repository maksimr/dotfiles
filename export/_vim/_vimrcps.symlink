" vimrcps
"
" @description Настройки для плагинов
" @type plugins settings
" 2012-04-22


" Snipmate переопределение основной клавиши
" <esc> - Alt
"let g:snips_trigger_key='<esc>l'
imap <esc>l <Plug>snipMateNextOrTrigger
smap <esc>l <Plug>snipMateNextOrTrigger

" Ack заменяем команду с ack на ack-grep
let g:ackprg="ack-grep -H --nocolor --nogroup --column"
set grepprg=ack-grep\ -a
nnoremap <leader>s :Ack! <c-r>=expand("<cword>")<cr><cr>

" Tagbar
nnoremap <leader>i :TagbarToggle<cr>
nnoremap <leader>t :TlistToggle<cr>

" LycosaBufferExplorer
nnoremap <S-b> :LycosaBufferExplorer<cr>
set hidden

" Powerline
let g:Powerline_symbols = 'unicode'
set encoding=utf-8

autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" vim-translator
" Настройка переводчика
" Устанавливаем язык для переводчика (vim-gtranslate)
" Устанавливаем кнопку для перевода в визуальном режиме (vim-gtranslate)
let g:goog_user_conf = {'langpair' : 'en|ru', 'v_key': 'T'}

" zencoding-vim
let g:user_zen_settings = { 'php' : { 'extends' : 'html', 'filters' : 'c', }, 'xml' : { 'extends' : 'html', }, 'haml' : { 'extends' : 'html', 'filters' : 'haml' } }
let g:user_zen_leader_key = '<c-y>' " Устанавливаем основную комбинацию клавиш (zencoding-vim)

" auto-pairs
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutToggle = '<esc>p'
"let g:AutoPairsShortcutFastWrap = '<C-l>'
let g:AutoPairsShortcutBackInsert = '<Leader>b'

" Syntastic
" Открываем и закрываем список с ошибками
" автоматически.
let g:syntastic_auto_loc_list = 1
" Выключаем красные метки на линиях
let g:syntastic_enable_signs = 1
" Добавляем свои метки для ошибок и предупреждений
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
" Не перескакиваем на ошибку автоматически
let g:syntastic_auto_jump=0
" И выключаем показ ошибки при наведении на линию
" может сильно тормозить
let g:syntastic_enable_balloons = 0
" Добавляем информацию об ошибках в statusline
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_javascript_checker="jshint"
" Настройка jshint
let g:syntastic_javascript_jshint_conf = expand("~/.hintrc")
" syntastic dart
let g:syntastic_dart_analyzer_conf='-out /tmp/'

" vim-notes
let g:notes_directory = '~/Documents/Notes'

" w3m
let g:w3m#search_engine = 'http://duckduckgo.com/html/?q='
let g:w3m#homepage = "http://www.google.com/"
nmap <silent> <LEADER>w :W3mTab jquery! <c-r>=expand("<cword>")<CR><CR>
nmap <LEADER>ws :W3mTab<space>
nmap <LEADER>wj :W3mTab js!<space>

" ctrlp.vim
" Open goto symbol on all buffers
"nmap <D-R> :CtrlPBufTagAll<cr>
"imap <D-R> <esc>:CtrlPBufTagAll<cr>
let g:ctrlp_cmd = 'CtrlPMixed'			" search anything (in files, buffers and MRU files at the same time.)
let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 1		" show the match window at the top of the screen
let g:ctrlp_max_height = 10				" maxiumum height of match window
let g:ctrlp_swDtch_buffer = 'et'		" jump to a file if it's open already
let g:ctrlp_use_caching = 1				" enable caching
let g:ctrlp_clear_cache_on_exit=0  		" speed up by not removing clearing cache evertime
let g:ctrlp_show_hidden = 1				" show me dotfiles
let g:ctrlp_mruf_max = 250 				" number of recently opened files

" TODO: add javascript and some other languages who doesn't have ctags support
" coffee: https://gist.github.com/michaelglass/5210282
" go: http://stackoverflow.com/a/8236826/462233
" objc:  http://www.gregsexton.org/2011/04/objective-c-exuberant-ctags-regex/
" rust: https://github.com/mozilla/rust/blob/master/src/etc/ctags.rust
let g:ctrlp_buftag_types = {
\ 'go'     	   : '--language-force=go --golang-types=ftv',
\ 'coffee'     : '--language-force=coffee --coffee-types=cmfvf',
\ 'markdown'   : '--language-force=markdown --markdown-types=hik',
\ 'objc'       : '--language-force=objc --objc-types=mpci',
\ 'rc'         : '--language-force=rust --rust-types=fTm'
\ }

"vim-session
let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

"delimitMate
"create line break when pressing enter
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

let g:ycm_min_num_of_chars_for_completion  = 1

" SuperTab completion fall-back
"let g:SuperTabDefaultCompletionType='<c-p>'
"set completefunc=SuperTabCodeComplete
let g:SuperTabDefaultCompletionType='<c-p>'

" Stop completion with enter, in addition to default ctrl+y
"imap <expr> <CR> pumvisible() ? '\<c-y>' : '<Plug>delimitMateCR'

nmap <silent> <LEADER>a :call XikiLaunch()<CR>
imap <silent> <C-a> <C-c>:call XikiLaunch()<CR>i
" Error with flush
if has('ruby')
ruby << EOF
class Object
  def flush; end unless Object.new.respond_to?(:flush)
end
EOF
endif

autocmd FileType w3m nnoremap <buffer> L :call w3m#Forward()<CR>
autocmd FileType w3m nnoremap <buffer> H :call w3m#Back()<CR>

" nathanaelkane/vim-indent-guides
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#202020   ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#252525 ctermbg=236
