" vimrcps
"
" @description Настройки для плагинов
" @type plugins settings
" 2012-04-22

" XXX То что использую
"  Bundle Lucius
if exists(':LuciusDark')
    LuciusDark
endif

if !exists('g:vimrcps_loaded')
    let g:snippets = {}
    let g:snippets.scope_aliases = {}
    let g:snippets.scope_aliases['javascript'] = "javascript,javascript_angular,javascript_jquery,javascript_jasmine"
    let g:snippets.scope_aliases['html'] = "html,html_angular,html_bootstrap,html_bower"
    let g:snippets.scope_aliases['yate'] = "yate,html,yate_nanoislands"
    let g:snippets.scope_aliases['vim'] = "vim,vim_vspec"
endif

"  Bundle 'garbas/vim-snipmate'
" переопределение основной клавиши
" <esc> - Alt
let c='l'

while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "inoremap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

" CRAZYYYYYY <Alt>
imap <A-l> <Plug>snipMateNextOrTrigger
smap <A-l> <Plug>snipMateNextOrTrigger
set ttimeoutlen=50

if !exists('g:vimrcps_loaded')
    let g:snipMate = g:snippets
endif

"  Bundle 'kien/ctrlp.vim' <-----
" ctrlp_cmd - Команда которая будет вызвана по умолчанию
" 'CtrlPMixed' - искать все (внутри файлов, буферов и MRU файлах существующих
" в этот момент)
let g:ctrlp_cmd = 'CtrlPMixed'
let ctrlp_regexp = 1 "Включаем по умолчанию RegExp режим
let g:ctrlp_match_window_bottom = 1  " показывать окно совпадений внизу
let g:ctrlp_match_window_reversed = 0 " показывать максимальное совпадение сверху
let g:ctrlp_max_height = 10    " высота окна совпадений

let g:ctrlp_working_path_mode = 'ra' " search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_swDtch_buffer = 'ET'  " Переходим в файл если он уже открыт в любом окне
let g:ctrlp_use_caching = 1    " включаем cache
let g:ctrlp_clear_cache_on_exit = 0    " Не чистим cache после выхода из vim-а
let g:ctrlp_show_hidden = 1    " показываем скрытые (dotfiles) файлы
let g:ctrlp_mruf_max = 250     " number of recently opened files
"let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
"let g:ctrlp_user_command = 'find %s -type f'
nnoremap <c-l> :CtrlPLine<CR>
nnoremap <LEADER>u :CtrlPUndo<CR>
" TODO: add javascript and some other languages who doesn't have ctags support
" coffee: https://gist.github.com/michaelglass/5210282
" go: http://stackoverflow.com/a/8236826/462233
" objc:  http://www.gregsexton.org/2011/04/objective-c-exuberant-ctags-regex/
" rust: https://github.com/mozilla/rust/blob/master/src/etc/ctags.rust
let g:ctrlp_buftag_types = {
      \ 'go'         : '--language-force=go --golang-types=ftv',
      \ 'coffee'     : '--language-force=coffee --coffee-types=cmfvf',
      \ 'markdown'   : '--language-force=markdown --markdown-types=hik',
      \ 'objc'       : '--language-force=objc --objc-types=mpci',
      \ 'rc'         : '--language-force=rust --rust-types=fTm'
      \ }
"  Bundle 'kien/ctrlp.vim' >-----

"  Bundle 'scrooloose/syntastic'
let g:syntastic_auto_loc_list = 1   " Открываем и закрываем список с ошибками автоматически.
let g:syntastic_enable_signs = 1    " красные метки на линиях
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_jump=0         " Не перескакиваем на ошибку автоматически
let g:syntastic_javascript_checkers=["jshint", "eslint"]
let g:syntastic_javascript_jshint_args = '--config '.expand("~/.jshintrc")

let g:syntastic_dart_analyzer_conf='-out /tmp/'

" Если находимся внутри 'quickfix'
" тогда вызываем lclose иначе quit
function! QuitOrLclose(bang)
  if &buftype == 'quickfix'
    let g:syntastic_auto_loc_list = 0
    ccl
    lcl
    let g:syntastic_auto_loc_list = 1
  else
    if a:bang
      quit!
    else
      quit
    endif
  endif
endfunction
com! -nargs=? -bang Q call QuitOrLclose('!' == '<bang>')
cabbrev q Q

" User project jshintrc if exist when run vim
function! s:find_jshintrc(dir)
    let l:found = globpath(a:dir, '.jshintrc')
    if filereadable(l:found)
        return l:found
    endif

    let l:parent = fnamemodify(a:dir, ':h')
    if l:parent != a:dir
        return s:find_jshintrc(l:parent)
    endif

    return "~/.jshintrc"
endfunction

function! UpdateJsHintConf()
    let l:dir = expand('%:p:h')
    let l:jshintrc = s:find_jshintrc(l:dir)

    if filereadable(l:jshintrc)
        let g:syntastic_javascript_jshint_conf = expand(l:jshintrc)
    endif
endfunction

augroup plugin_syntastic
    autocmd!
    autocmd BufEnter * call UpdateJsHintConf()
    autocmd FileType javascript let g:syntastic_javascript_checkers=["jshint", "eslint"]
    autocmd BufEnter *.jsx let g:syntastic_javascript_checkers=["jsxhint"]
augroup END

"  Bundle 'Lokaltog/vim-easymotion' <-----
let g:EasyMotion_leader_key = "<Leader><Leader><Leader>"
"  Bundle 'Lokaltog/vim-easymotion' >-----
"
"  Bundle 'command-t' <-----
nnoremap <leader>, :CommandT<cr>
"  Bundle 'command-t' >-----

"  Bundle 'benmills/vimux' <-----
nnoremap <Leader>vp :VimuxPromptCommand<CR>
nnoremap <Leader>vpl :VimuxRunLastCommand<CR>
"  Bundle 'benmills/vimux' >-----

"  Bundle 'tpope/vim-dispatch' <-----
nnoremap <Leader>d :Dispatch<space>
nnoremap <Leader>vs :Start<space>
"  Bundle 'tpope/vim-dispatch' >-----

" Bundle 'mileszs/ack.vim' <-----
" Ack заменяем команду с ack на ack-grep
if executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    set grepprg=ack-grep\ -a
else
    let g:ackprg="grep"
endif

nnoremap <leader>g :Ack! <c-r>=expand("<cword>")<cr><cr>
" Bundle 'mileszs/ack.vim' >-----

" Bundle 'majutsushi/tagbar' <-----
nnoremap <leader>i :TagbarToggle<cr>
" Bundle 'majutsushi/tagbar' >-----

" Bundle 'LycosaExplorer' <-----
nnoremap <S-b> :LycosaBufferExplorer<cr>
set hidden
" Bundle 'LycosaExplorer' >-----

" Bundle 'Lokaltog/vim-powerline' <-----
let g:Powerline_symbols = 'unicode'
set encoding=utf-8
" Bundle 'Lokaltog/vim-powerline' >-----

" Bundle 'maksimr/vim-jsbeautify' <-----
augroup plugin_vim_jsbeautify
    autocmd!

    autocmd FileType javascript nnoremap <buffer>  <c-f> :call JsBeautify()<cr>
    autocmd BufEnter *.jsx nnoremap <buffer>  <c-f> :call JsxBeautify()<cr>
    autocmd FileType html nnoremap <buffer> <c-f> :call HtmlBeautify()<cr>
    autocmd FileType css nnoremap <buffer> <c-f> :call CSSBeautify()<cr>

    autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
    autocmd BufEnter *.jsx vnoremap <buffer>  <c-f> :call RangeJsxBeautify()<cr>
    autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
    autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>
augroup END
" Bundle 'maksimr/vim-jsbeautify' >-----

" Bundle 'maksimr/vim-karm' <-----
augroup plugin_vim_karma
    autocmd!

    autocmd FileType javascript nnoremap <buffer>  <Leader>ks :call RunNearestSpec()<cr>
    autocmd FileType javascript nnoremap <buffer>  <Leader>kd :call RunNearestTestSuite()<cr>
    autocmd FileType javascript nnoremap <buffer>  <Leader>kf :call RunCurrentSpecFile()<cr>
    autocmd FileType javascript nnoremap <buffer>  <Leader>ka :call RunAllSpecs()<cr>
augroup END
" Bundle 'maksimr/vim-karm' >-----

" Bundle 'maksimr/vim-translator' <-----
" Настройка переводчика
" Устанавливаем язык для переводчика (vim-gtranslate)
" Устанавливаем кнопку для перевода в визуальном режиме (vim-gtranslate)
let g:goog_user_conf = {'langpair' : 'en|ru', 'v_key': 'T', 'cmd': 'node'}
nnoremap g; :Translate<space>
" Bundle 'maksimr/vim-translator' >-----

" Bundle 'thisivan/vim-bufexplorer' <----
" открывает окно с текущей директорией
nnoremap <C-e> :Explore<cr>
nnoremap <S-e> :BufExplorer<cr>
" Bundle 'thisivan/vim-bufexplorer' >----

" Bundle 'mattn/emmet-vim' <-----
let g:user_zen_settings = { 'php' : { 'extends' : 'html', 'filters' : 'c', }, 'xml' : { 'extends' : 'html', }, 'haml' : { 'extends' : 'html', 'filters' : 'haml' } }
let g:user_zen_leader_key = '<c-y>' " Устанавливаем основную комбинацию клавиш (zencoding-vim)
" Bundle 'mattn/emmet-vim' >-----

" Bundle 'xolox/vim-session' <-----
let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

nnoremap <Leader>ss :SaveSession<space>
nnoremap <Leader>sd :DeleteSession<space>
nnoremap <Leader>so :OpenSession<space>
nnoremap <Leader>sc :CloseSession<Enter>
" Bundle 'xolox/vim-session' >-----

" Bundle 'Raimondi/delimitMate' <-----
let g:delimitMate_expand_cr = 1 " create line break when pressing enter
let g:delimitMate_expand_space = 1
" Bundle 'Raimondi/delimitMate' >-----

" Bundle 'ervandew/supertab' <-----
" SuperTab completion fall-back
let g:SuperTabDefaultCompletionType='<c-p>'
" Bundle 'ervandew/supertab' >-----

" Bundle 'marijnh/tern_for_vim' <-----
augroup plugin_tern_for_vim
    autocmd!

    autocmd FileType javascript noremap <buffer>  <LocalLeader>tp :TernDef<cr>
    autocmd FileType javascript noremap <buffer>  <LocalLeader>tr :TernRefs<cr>
    autocmd FileType javascript noremap <buffer>  <LocalLeader>tpp :TernDefPreview<cr>
    autocmd FileType javascript noremap <buffer>  <LocalLeader>trr :TernRename<cr>
    autocmd FileType javascript noremap <buffer>  <LocalLeader>tt :TernType<cr>
augroup END
" Bundle 'marijnh/tern_for_vim' >-----

" Bundle 'xolox/vim-notes' <-----
let g:notes_directories = ['~/Documents/Notes']
" Bundle 'xolox/vim-notes' >-----

" Bundle 'takac/vim-hardtime' <-----
let g:hardtime_default_on = 0
" Bundle 'takac/vim-hardtime' >-----

" Bundle 'tpope/vim-fugitive' <-----
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gc :Gcommit
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gp :Git push<CR>

command! -nargs=+ GitGrep execute 'let &grepprg="git grep --no-color" | silent grep! '.<q-args>.' | redraw! | set grepprg& | copen'
nnoremap <Leader>gg :GitGrep 
" Bundle 'tpope/vim-fugitive' >-----

" Bundle 'Shougo/neocomplcache.vim' <-----
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_ignore_case = 0
let g:neocomplcache_enable_smart_case = 0
let g:neocomplcache_min_keyword_length = 2
let g:neocomplcache_min_syntax_length = 1
call neocomplcache#custom_source('buffer_complete', 'rank', 100)
" Complete from all buffers
let g:neocomplcache_same_filetype_lists = {}
let g:neocomplcache_same_filetype_lists._ = '_'
" Play nice with SuperTab and snipMate
let g:neocomplcache_disable_auto_complete = 0

augroup plugin_neocomplcache
    autocmd!

    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=tern#Complete
augroup END
" Bundle 'Shougo/neocomplcache.vim' >-----

" Bundle 'Shougo/neosnippet' <-----
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_preview = 0
set completeopt-=preview

if !exists('g:vimrcps_loaded')
    let g:neosnippet#scope_aliases = {}
    let g:neosnippet#scope_aliases = g:snippets.scope_aliases
endif

let g:neosnippet#disable_runtime_snippets = { '_' : 1 }

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory=['~/.vim/bundle/vim-javascript/snippets', '~/.vim/bundle/vim-snippets/snippets', '~/.vim/bundle/vim-yate/snippets']
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" SuperTab like snippets behavior.
augroup plugin_neosnippet
    autocmd!

    autocmd VimEnter * imap <expr><TAB> neosnippet#expandable() && !pumvisible() ?  "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<Plug>SuperTabForward"
    autocmd VimEnter * smap <expr><TAB> neosnippet#expandable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<Plug>SuperTabForward"
    autocmd VimEnter * imap <expr><A-l> neosnippet#expandable_or_jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ? "\<C-x><C-x><A-l>" : "\<Plug>snipMateNextOrTrigger")
    autocmd VimEnter * smap <expr><A-l> neosnippet#expandable_or_jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<A-l>"
    autocmd InsertLeave * :NeoSnippetClearMarkers
augroup END
" Bundle 'Shougo/neosnippet' >-----

let g:vimrcps_loaded = 1
