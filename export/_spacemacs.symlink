(defun dotspacemacs/layers ()
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     emacs-lisp
     git

     auto-completion
     syntax-checking
     semantic
     osx

     scheme
     racket
     clojure
     javascript
     react
     html

     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom
            shell-defult-shell 'zsh)
     )
   dotspacemacs-additional-packages
   '(
     editorconfig
     nvm
     mocha
     evil-surround
    )
   dotspacemacs-excluded-packages '()
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  (setq-default
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update t
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   dotspacemacs-startup-banner 'official
   dotspacemacs-startup-lists '(recents projects)
   dotspacemacs-startup-recent-list-size 5
   dotspacemacs-scratch-mode 'text-mode
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         monokai
                         zenburn)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Fira Code"
                               :size 18
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-default-layout-name "Default"
   dotspacemacs-display-default-layout nil
   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   dotspacemacs-use-ido nil
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar t
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t
   dotspacemacs-line-numbers nil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup "trailing"
   evil-escape-key-sequence "jk"
   evil-esccape-delay 2.7
   ))

(defun dotspacemacs/user-init ())

(defun dotspacemacs/user-config ()
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (define-key evil-normal-state-map (kbd "C-f") 'oz-indent-buffer)

  (add-hook 'oz-mode-hook 'auto-complete-mode)

  (evil-leader/set-key-for-mode 'scheme-mode
    "C-f" 'srefactor-lisp-format-buffer)

  (evil-leader/set-key-for-mode 'racket-mode
    "C-f" 'srefactor-lisp-format-buffer)

  (setq neo-theme 'nerd)
  (editorconfig-mode 1)

  (setq-default ac-sources '(ac-source-filename
                     ac-source-functions
                     ac-source-yasnippet
                     ac-source-variables
                     ac-source-symbols
                     ac-source-features
                     ac-source-abbrev
                     ac-source-words-in-same-mode-buffers
                     ac-source-dictionary))


  (setq clojure-enable-fancify-symbols t)
  (setq global-evil-surround-mode 1)
  (setq powerline-default-separator nil)
  (set-default 'truncate-lines t)

  (setq geiser-active-implementations '(guile)
        geiser-mode-smart-tab-p t
        geiser-repl-autodoc-p t
        geiser-repl-history-filename "~/.emacs.d/geiser-history"
        geiser-repl-query-on-kill-p nil

        geiser-debug-jump-to-debug-p nil
        geiser-debug-show-debug-p nil

        geiser-implementations-alist
        '(((regexp "\\.scm$") guile)
          ((regexp "\\.ss$") guile)))


  (defun maksimrv/setup-local-eslint ()
    (interactive)
    (let ((local-eslint (expand-file-name (concat (projectile-project-root) "node_modules/.bin/eslint"))))
      (setq flycheck-javascript-eslint-executable
            (and (file-exists-p local-eslint) local-eslint))))

  (with-eval-after-load 'flycheck
    (maksimrv/setup-local-eslint)
    (flycheck-add-mode 'javascript-eslint 'js2-jsx-mode)
    (flycheck-add-mode 'javascript-eslint 'web-mode))

  (with-eval-after-load 'projectile
    (add-hook 'projectile-after-switch-project-hook 'maksimrv/setup-local-eslint))
  )
