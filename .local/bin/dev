#!/bin/bash
# Wrapper script to run [devcontainer](https://github.com/devcontainers/cli) commands
# This script is intended to be used in a project with a .devcontainer folder
# It will search for the .devcontainer folder in the current directory or any parent directory
# and execute the devcontainer command in the context of the project
#
# Extend default devcontainer command with:
# - init: Initializes the project with a default devcontainer configuration
# - start: Starts the container for the project (alias for up)
# - stop: Stops the running container for the project
# - stop-all: Stops all running devcontainers
# - shell: Starts a shell in the running container for the project
# - code | code-insiders [<path>]: Launches VS Code with the project folder mounted in the container
set -e

function debug() {
  if [ -n "$DEBUG" ]; then
    echo "[DEBUG]: $1"
  fi
}

function _get_workspace_folder() {
  EAT_VALUE=""
  for arg in "$@"; do
    if [[ "$arg" == "--workspace-folder="* ]]; then
      WORKSPACE_FOLDER=$(echo "$arg" | sed 's/--workspace-folder=//')
      echo "$WORKSPACE_FOLDER"
      return
    elif [ -n "$EAT_VALUE" ]; then
      echo "$arg"
      return
    elif [[ "$arg" == "--workspace-folder" ]]; then
      EAT_VALUE="true"
      continue
    fi
  done
}

function devcontainer_exec() {
  LOCAL_DEVCONTAINER_ARGS=("$@")

  if [ "$(command -v devcontainer)" ]; then
    debug "Executing devcontainer command: devcontainer ${LOCAL_DEVCONTAINER_ARGS[*]}"
    exec "devcontainer" "${LOCAL_DEVCONTAINER_ARGS[@]}"
  fi

  debug "Executing npx command: npx -y @devcontainers/cli ${LOCAL_DEVCONTAINER_ARGS[*]}"
  exec "npx" "-y" "@devcontainers/cli" "${LOCAL_DEVCONTAINER_ARGS[@]}"
}

function _list_devcontainers() {
  docker ps -a \
      --filter "label=devcontainer.local_folder" \
      --format "table {{.ID}}\t{{.Label \"devcontainer.local_folder\"}}\t{{.State}}"
}

function _init_devcontainer() {
  devcontainer_exec templates apply -t ghcr.io/devcontainers/templates/ubuntu:latest
}

function _stop_all_devcontainers() {
  CONTAINER_IDS=$(docker ps -q --filter "label=devcontainer.local_folder")
  if [ -n "$CONTAINER_IDS" ]; then
    CONTAINER_IDS=$(echo "$CONTAINER_IDS" | tr '\n' ' ')
    echo "Stopping containers: $CONTAINER_IDS"
    docker stop $CONTAINER_IDS
  else
    debug "No containers found to stop"
  fi
}

WORKING_DIR=$(_get_workspace_folder "$@")
WORKING_DIR=${WORKING_DIR:-$(pwd)}
DEVCONTAINER_FOLDER=".devcontainer"

debug "Working directory: $WORKING_DIR"

if [ "$#" -eq 0 ]; then
  devcontainer_exec
  exit 0
fi

if [ "$1" == 'ls' ]; then
  _list_devcontainers
  exit 0
fi

if [ "$1" == 'init' ]; then
  _init_devcontainer
  exit 0
fi

if [ "$1" == 'stop-all' ]; then
  _stop_all_devcontainers
  exit 0
fi

PROJECT_ROOT_DIR="$WORKING_DIR"
while [ ! -d "$PROJECT_ROOT_DIR/$DEVCONTAINER_FOLDER" ]; do
  if [ "$PROJECT_ROOT_DIR" == "/" ] || [ -d "$PROJECT_ROOT_DIR/.git" ]; then
    echo "Error: Could not find .devcontainer folder" 1>&2
    exit 1
  fi
  PROJECT_ROOT_DIR=$(dirname "$PROJECT_ROOT_DIR")
  debug "Searching for .devcontainer folder in $PROJECT_ROOT_DIR"
done

debug "Passed arguments: $*"

DEVCONTAINER_ARGS=()
DEVCONTAINER_COMMAND=""
for arg in "$@"; do
  if [[ "$arg" != "-"* ]] && [ -z "$DEVCONTAINER_COMMAND" ]; then
    DEVCONTAINER_COMMAND="$arg"
  fi

  if [ "$arg" == "shell" ]; then
    DEVCONTAINER_ARGS+=("exec")
    DEVCONTAINER_ARGS+=("bash")
  elif [ "$arg" == "start" ]; then
    DEVCONTAINER_ARGS+=("up")
  else
    DEVCONTAINER_ARGS+=("$arg")
  fi
done

if [ "$DEVCONTAINER_COMMAND" == "init" ]; then
  npx -y @devcontainers/cli templates apply -t ghcr.io/devcontainers/templates/ubuntu:latest
  exit 0
fi

if [ "$DEVCONTAINER_COMMAND" == "stop" ]; then
  CONTAINER_ID=$(docker ps -q --filter "label=devcontainer.local_folder=$PROJECT_ROOT_DIR")
  if [ -n "$CONTAINER_ID" ]; then
    echo "Stopping container: $CONTAINER_ID"
    docker stop "$CONTAINER_ID"
  else
    debug "No container found to stop for project: $PROJECT_ROOT_DIR"
  fi
  exit 0
fi

if [ "$DEVCONTAINER_COMMAND" == "code" ] || [  "$DEVCONTAINER_COMMAND" == "code-insiders"  ]; then
  LAUNCH_PATH="$WORKING_DIR"
  LAUNCH_PATH_ENCODED=$(echo -n "$LAUNCH_PATH" | xxd -p | tr -d '\n')
  WORKSPACE_MOUNT_DEFAULT_PATH="/workspaces"
  WORKSPACE_MOUNT_CUSTOM_PATH=$(cat "$PROJECT_ROOT_DIR/$DEVCONTAINER_FOLDER/devcontainer.json" | grep '"workspaceFolder":' | sed 's/.*"\(.*\)".*/\1/')
  WORKSPACE_MOUNT_PATH=${WORKSPACE_MOUNT_CUSTOM_PATH:-$WORKSPACE_MOUNT_DEFAULT_PATH}
  PROJECT_PATH="$2"
  if [ -z "$PROJECT_PATH" ]; then
    PROJECT_PATH=$(echo "$LAUNCH_PATH" | sed "s|$PROJECT_ROOT_DIR||")
  fi
  PROJECT_NAME=$(basename "$PROJECT_ROOT_DIR")
  WORKSPACE_PATH="$WORKSPACE_MOUNT_PATH/$PROJECT_NAME/$PROJECT_PATH"
  LAUNCH_URI="vscode-remote://dev-container+${LAUNCH_PATH_ENCODED}${WORKSPACE_PATH}"
  CODE_EXECUTABLE=$DEVCONTAINER_COMMAND

  # Export DOCKER_HOST explicitly to avoid issues
  # https://github.com/microsoft/vscode-remote-release/issues/5420
  CURRENT_DOCKER_HOST=$(docker context inspect --format '{{.Endpoints.docker.Host}}')

  debug "Exporting DOCKER_HOST: $CURRENT_DOCKER_HOST"
  debug "Launching VS Code with URI: $LAUNCH_URI"

  DOCKER_HOST=$CURRENT_DOCKER_HOST \
    exec $CODE_EXECUTABLE "--folder-uri=$LAUNCH_URI"
  exit 0
fi

if [[ "$*" != *"--workspace-folder"* ]] && [ -n "$DEVCONTAINER_COMMAND" ]; then
  DEVCONTAINER_ARGS=("${DEVCONTAINER_ARGS[0]}" "--workspace-folder=$PROJECT_ROOT_DIR" "${DEVCONTAINER_ARGS[@]:1}")
fi

devcontainer_exec "${DEVCONTAINER_ARGS[@]}"
